// controllers/gameController.ts
import { Request, Response } from "express";
import { dbcon } from "../database/pool";
import { OkPacket, RowDataPacket } from 'mysql2';
import { Console } from "console";

// --- Game CRUD (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route POST /api/admin/games
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Insert Game
 */
export const createGame_api = async (req: Request, res: Response) => {
    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö release_date ‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ NOW() ‡πÅ‡∏ó‡∏ô
    const { name, price, description, image, type_id } = req.body; 

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 500
    if (!name || !price || !type_id) {
        return res.status(400).json({ message: "Missing required fields: name, price, and type_id are mandatory." });
    }
    const numPrice = Number(price);
    const numTypeId = Number(type_id);
    if (isNaN(numPrice) || isNaN(numTypeId) || numPrice < 0) {
        return res.status(400).json({ message: "Price and Type ID must be valid non-negative numbers." });
    }

    try {
        const [results] = await dbcon.query<OkPacket>(
            // ‚úÖ ‡πÉ‡∏ä‡πâ NOW() ‡πÉ‡∏ô SQL ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            "INSERT INTO game(name, price, release_date, description, image, type_id) VALUES (?, ?, NOW(), ?, ?, ?)",
            [name, numPrice, description || null, image || null, numTypeId]
        );
        return res.status(201).json({ message: "Game created successfully.", game_id: results.insertId });

    } catch (error) {
        console.error("Error creating game:", error);
        return res.status(500).json({ message: "Server error while creating game." });
    }
};

/**
 * @route PUT /api/admin/games/:game_id
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Update Game
 */
export const updateGame_api = async (req: Request, res: Response) => {
    const game_id = req.params.game_id;
    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö release_date ‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ
    const { name, price, description, image, type_id } = req.body;

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation)
    if (!name || !price || !type_id) {
        return res.status(400).json({ message: "Missing required fields for update: name, price, and type_id are mandatory." });
    }
    const numPrice = Number(price);
    const numTypeId = Number(type_id);

    if (isNaN(numPrice) || isNaN(numTypeId) || numPrice < 0) {
        return res.status(400).json({ message: "Price and Type ID must be valid non-negative numbers." });
    }

    try {
        const [results] = await dbcon.query<OkPacket>(
            "UPDATE game SET name = ?, price = ?, description = ?, image = ?, type_id = ? WHERE game_id = ?",
            [name, numPrice, description || null, image || null, numTypeId, game_id]
        );

        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Game not found or no changes made." });
        }

        return res.status(200).json({ message: "Game updated successfully." });

    } catch (error) {
        console.error(`Error updating game ${game_id}:`, error);
        return res.status(500).json({ message: "Server error while updating game." });
    }
};

/**
 * @route DELETE /api/admin/games/:game_id
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Delete Game
 */
export const deleteGame_api = async (req: Request, res: Response) => {
    const game_id = req.params.game_id;
    try {
        const [results] = await dbcon.query<OkPacket>(
            "DELETE FROM game WHERE game_id = ?",
            [game_id]
        );
        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Game not found." });
        }
        return res.status(200).json({ message: "Game deleted successfully." });
    } catch (error) {
        console.error(`Error deleting game ${game_id}:`, error);
        // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Foreign Key constraint
        return res.status(500).json({ message: "Server error while deleting game." });
    }
};


// --- Game Type Management (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route POST /api/admin/gametypes
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏° - Insert Game Type
 */
export const createGameType_api = async (req: Request, res: Response) => {
    const { typename } = req.body;

    if (!typename) {
        return res.status(400).json({ message: "Missing required field: typename is mandatory." });
    }

    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        const [existing] = await dbcon.query<RowDataPacket[]>(
            "SELECT type_id FROM gametype WHERE typename = ?",
            [typename]
        );
        if (existing.length > 0) {
            return res.status(409).json({ message: "Game type already exists." });
        }

        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO gametype(typename) VALUES (?)",
            [typename]
        );
        return res.status(201).json({ message: "Game type created successfully.", type_id: results.insertId });

    } catch (error) {
        console.error("Error creating game type:", error);
        return res.status(500).json({ message: "Server error while creating game type." });
    }
};


// --- Discount Management (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route POST /api/admin/discounts
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
 * @body { code_name: string, discount_value: number, max_user: number }
 */
export const createDiscountCode_api = async (req: Request, res: Response) => {
    const { code_name, discount_value, max_user } = req.body;

    // 1. Validation
    if (!code_name || discount_value === undefined || max_user === undefined) {
        return res.status(400).json({ message: "Missing required fields: code_name, discount_value, and max_user are mandatory." });
    }
    const numDiscountValue = Number(discount_value);
    const numMaxUser = Number(max_user);

    // discount_value ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 (‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤), max_user ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1
    if (isNaN(numDiscountValue) || isNaN(numMaxUser) || numDiscountValue <= 0 || numMaxUser < 1) {
        return res.status(400).json({ message: "Discount value must be a positive number, and Max User must be a positive integer." });
    }

    try {
        // 2. Check for existing code name
        const [existing] = await dbcon.query<RowDataPacket[]>(
            "SELECT code_id FROM discountcode WHERE code_name = ?",
            [code_name]
        );
        if (existing.length > 0) {
            return res.status(409).json({ message: `Discount code '${code_name}' already exists.` });
        }

        // 3. Insert new code
        // remaining_user ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö max_user
        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO discountcode(code_name, discount_value, max_user, remaining_user) VALUES (?, ?, ?, ?)",
            [code_name, numDiscountValue, numMaxUser, numMaxUser]
        );

        return res.status(201).json({
            message: "Discount code created successfully.",
            code_id: results.insertId,
            code_name,
            discount_value: numDiscountValue,
            max_user: numMaxUser
        });

    } catch (error) {
        console.error("Error creating discount code:", error);
        return res.status(500).json({ message: "Server error while creating discount code." });
    }
};

/**
 * @route GET /api/admin/discounts
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î - ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getAllDiscountCodes_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            "SELECT code_id, code_name, discount_value, remaining_user, max_user FROM discountcode ORDER BY code_id DESC"
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error("Error fetching all discount codes:", error);
        return res.status(500).json({ message: "Server error while fetching discount codes." });
    }
};

/**
 * @route DELETE /api/admin/discounts/:code_id
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î - ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
 */
export const deleteDiscountCode_api = async (req: Request, res: Response) => {
    const code_id = req.params.code_id;
    try {
        const [results] = await dbcon.query<OkPacket>(
            "DELETE FROM discountcode WHERE code_id = ?",
            [code_id]
        );
        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Discount code not found." });
        }
        return res.status(200).json({ message: "Discount code deleted successfully." });
    } catch (error) {
        console.error(`Error deleting discount code ${code_id}:`, error);
        // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Foreign Key constraint
        return res.status(500).json({ message: "Server error while deleting discount code." });
    }
};


// --- Game Type (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---


/**
 * @route GET /api/gametypes
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getAllGameTypes_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            "SELECT type_id, typename FROM gametype ORDER BY typename ASC"
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error("Error fetching game types:", error);
        return res.status(500).json({ message: "Server error while fetching game types." });
    }
};


// --- Game Fetching (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User/Guest) ---

/**
 * @route GET /api/games/latest
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡πÄ‡∏Å‡∏°
 */
export const getLatestGames_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.image, gt.typename
             FROM game g
             JOIN gametype gt ON g.type_id = gt.type_id
             ORDER BY g.release_date DESC
             LIMIT 10`
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error("Error fetching latest games:", error);
        return res.status(500).json({ message: "Server error while fetching latest games." });
    }
};

/**
 * @route GET /api/games/top-sellers
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ
 * @requires ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á game, gametransactionitem ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
 */
export const getTopSellerGames_api = async (req: Request, res: Response) => {
    try {
        // 1. Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Transaction)
        const sql = `
            SELECT 
                g.game_id, 
                g.name, 
                g.price, 
                g.description, 
                g.image, 
                g.release_date, 
                gt.type_name, 
                COUNT(gi.game_id) AS total_sales
            FROM game g
            JOIN gametype gt ON g.type_id = gt.type_id
            JOIN gametransactionitem gi ON g.game_id = gi.game_id 
            GROUP BY g.game_id, g.name, g.price, g.description, g.image, g.release_date, gt.type_name
            ORDER BY total_sales DESC
            LIMIT 5;
        `;
        
        const [games] = await dbcon.query<RowDataPacket[]>(sql);

        // 2. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö
        return res.status(200).json(games);

    } catch (error) {
        console.error("Database error in getTopSellerGames_api:", error);
        // ‚ùå ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Query ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 500
        return res.status(500).json({ message: "Failed to fetch top seller games due to a server error." });
    }
};

/**
 * @route GET /api/games/search
 * @desc ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏î‡πâ‡∏ß‡∏¢ keyword ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ type_id
 * @query keyword (optional)
 * @query type_id (optional)
 */
export const searchGames_api = async (req: Request, res: Response) => {
    const { keyword, type_id } = req.query;

    let query = `
        SELECT g.game_id, g.name, g.price, g.release_date, g.image, gt.typename
        FROM game g
        JOIN gametype gt ON g.type_id = gt.type_id
        WHERE 1=1
    `;
    const params: (string | number)[] = [];

    if (keyword) {
        query += ` AND g.name LIKE ?`;
        params.push(`%${keyword}%`);
    }

    if (type_id) {
        const numTypeId = Number(type_id);
        if (!isNaN(numTypeId) && numTypeId > 0) {
            query += ` AND g.type_id = ?`;
            params.push(numTypeId);
        }
    }

    query += ` ORDER BY g.name ASC`;

    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(query, params);
        return res.status(200).json(rows);
    } catch (error) {
        console.error("Error searching games:", error);
        return res.status(500).json({ message: "Server error while searching games." });
    }
};

/**
 * @route GET /api/games/:game_id
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
 */
export const getGameDetails_api = async (req: Request, res: Response) => {
    const game_id = req.params.game_id;
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.description, g.image, g.type_id, gt.typename
             FROM game g
             JOIN gametype gt ON g.type_id = gt.type_id
             WHERE g.game_id = ?`,
            [game_id]
        );

        if (rows.length === 0) {
            return res.status(404).json({ message: "Game not found." });
        }

        return res.status(200).json(rows[0]);
    } catch (error) {
        console.error(`Error fetching game ${game_id} details:`, error);
        return res.status(500).json({ message: "Server error while fetching game details." });
    }
};

/**
 * @route GET /api/admin/games
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin View)
 */
export const getAllGames_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.image, g.description, gt.typename
             FROM game g
             JOIN gametype gt ON g.type_id = gt.type_id
             ORDER BY g.game_id DESC`
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error("Error fetching all games for admin:", error);
        return res.status(500).json({ message: "Server error while fetching all games." });
    }
};


// --- Basket Management (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route GET /api/users/:user_id/basket
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á User
 */
export const getBasket_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;

    try {
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞ join ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT b.bid, b.uid, b.game_id, b.added_at, g.name AS game_name, g.price, g.image
             FROM basket b
             JOIN game g ON b.game_id = g.game_id
             WHERE b.uid = ?
             ORDER BY b.added_at DESC`,
            [uid]
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error(`Error fetching basket for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while fetching basket." });
    }
};

/**
 * @route POST /api/users/:user_id/basket/:game_id
 * @desc ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 */
export const addToBasket_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;
    const game_id = req.params.game_id;

    try {
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [libraryCheck] = await dbcon.query<RowDataPacket[]>(
            "SELECT purchase_id FROM gamelibrary WHERE user_id = ? AND game_id = ?",
            [uid, game_id]
        );
        if (libraryCheck.length > 0) {
            return res.status(409).json({ message: "Game is already in your library." });
        }

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [basketCheck] = await dbcon.query<RowDataPacket[]>(
            "SELECT bid FROM basket WHERE uid = ? AND game_id = ?",
            [uid, game_id]
        );
        if (basketCheck.length > 0) {
            return res.status(409).json({ message: "Game is already in your basket." });
        }

        // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO basket(uid, game_id, added_at) VALUES (?, ?, NOW())",
            [uid, game_id]
        );

        return res.status(201).json({ message: "Game added to basket successfully.", bid: results.insertId });

    } catch (error) {
        console.error(`Error adding game ${game_id} to basket for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while adding to basket." });
    }
};

/**
 * @route DELETE /api/users/:user_id/basket/:bid
 * @desc ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 */
export const removeFromBasket_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;
    const bid = req.params.bid; // Basket ID

    try {
        const [results] = await dbcon.query<OkPacket>(
            "DELETE FROM basket WHERE bid = ? AND uid = ?",
            [bid, uid]
        );

        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Basket item not found or does not belong to user." });
        }

        return res.status(200).json({ message: "Game removed from basket successfully." });
    } catch (error) {
        console.error(`Error removing basket item ${bid} for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while removing from basket." });
    }
};


// --- Game Purchase and Library (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route GET /api/users/:user_id/library
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á (Library) ‡∏Ç‡∏≠‡∏á User
 */
export const getUserGameLibrary_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT gl.purchase_id, gl.game_id, gl.purchase_date, g.name AS game_name, g.image, g.description, gt.typename
             FROM gamelibrary gl
             JOIN game g ON gl.game_id = g.game_id
             JOIN gametype gt ON g.type_id = gt.type_id
             WHERE gl.user_id = ?
             ORDER BY gl.purchase_date DESC`,
            [uid]
        );
        return res.status(200).json(rows);
    } catch (error) {
        console.error(`Error fetching library for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while fetching game library." });
    }
};

/**
 * @route POST /api/users/:user_id/purchase
 * @desc ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * @body { code_name: string | null }
 */
export const purchaseGame_api = async (req: Request, res: Response) => {
    const uid = Number(req.params.user_id);
    const { code_name } = req.body;
    let dbcon_transaction; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö transaction

    try {
        dbcon_transaction = await dbcon.getConnection();
        await dbcon_transaction.beginTransaction();

        // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const [basketRows] = await dbcon_transaction.query<RowDataPacket[]>(
            `SELECT b.bid, b.game_id, g.price
             FROM basket b
             JOIN game g ON b.game_id = g.game_id
             WHERE b.uid = ?`,
            [uid]
        );

        if (basketRows.length === 0) {
            await dbcon_transaction.commit(); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢)
            return res.status(200).json({ message: "Basket is empty. No purchase made." });
        }

        const subtotal = basketRows.reduce((sum, item) => sum + item.price, 0);
        let finalTotal = subtotal;
        let discountCode = null;
        let discountAmount = 0;
        let codeId = null;

        // 2. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (code_name) {
            const [codeRows] = await dbcon_transaction.query<RowDataPacket[]>(
                "SELECT code_id, discount_value, remaining_user FROM discountcode WHERE code_name = ? FOR UPDATE",
                [code_name] // FOR UPDATE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            );
            discountCode = codeRows[0];

            if (!discountCode || discountCode.remaining_user <= 0) {
                await dbcon_transaction.rollback();
                return res.status(400).json({ message: "Invalid or expired discount code." });
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
            const [usageCheck] = await dbcon_transaction.query<RowDataPacket[]>(
                "SELECT transaction_id FROM gametransaction WHERE user_id = ? AND code_id = ?",
                [uid, discountCode.code_id]
            );
            if (usageCheck.length > 0) {
                await dbcon_transaction.rollback();
                return res.status(409).json({ message: "You have already used this discount code." });
            }

            discountAmount = discountCode.discount_value;
            finalTotal = Math.max(0, subtotal - discountAmount);
            codeId = discountCode.code_id;

            // 3. ‡∏´‡∏±‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
            await dbcon_transaction.query(
                "UPDATE discountcode SET remaining_user = remaining_user - 1 WHERE code_id = ?",
                [discountCode.code_id]
            );
        }

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô Wallet
        const [walletRows] = await dbcon_transaction.query<RowDataPacket[]>(
            "SELECT balance FROM wallet WHERE user_id = ? FOR UPDATE",
            [uid] // FOR UPDATE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        );
        const currentBalance = walletRows[0]?.balance || 0;

        if (currentBalance < finalTotal) {
            await dbcon_transaction.rollback();
            return res.status(402).json({
                message: "Insufficient wallet balance.",
                required_amount: finalTotal,
                current_balance: currentBalance
            });
        }

        // 5. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Purchase)
        // 5.1 ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction
        const [purchaseResult] = await dbcon_transaction.query<OkPacket>(
            "INSERT INTO gametransaction(user_id, total_amount, discount_used, final_amount, code_id, transaction_date) VALUES (?, ?, ?, ?, ?, NOW())",
            [uid, subtotal, discountAmount, finalTotal, codeId]
        );
        const transactionId = purchaseResult.insertId;

        // 5.2 ‡∏´‡∏±‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å Wallet
        await dbcon_transaction.query(
            "UPDATE wallet SET balance = balance - ? WHERE user_id = ?",
            [finalTotal, uid]
        );

        // 5.3 ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction Items
        for (const item of basketRows) {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á
            await dbcon_transaction.query(
                "INSERT INTO gamelibrary(user_id, game_id, purchase_date) VALUES (?, ?, NOW())",
                [uid, item.game_id]
            );
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Transaction
            await dbcon_transaction.query(
                "INSERT INTO gametransactionitem(transaction_id, game_id, price_paid) VALUES (?, ?, ?)",
                [transactionId, item.game_id, item.price] // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Å‡∏°
            );
        }

        // 5.4 ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        await dbcon_transaction.query(
            "DELETE FROM basket WHERE uid = ?",
            [uid]
        );

        // 6. Commit Transaction
        await dbcon_transaction.commit();

        return res.status(200).json({
            message: "Purchase successful.",
            transaction_id: transactionId,
            final_amount: finalTotal,
            purchased_items: basketRows.length
        });

    } catch (error) {
        if (dbcon_transaction) {
            await dbcon_transaction.rollback();
        }
        console.error("Error during purchase transaction:", error);
        return res.status(500).json({ message: "Server error during purchase process." });
    } finally {
        if (dbcon_transaction) {
            dbcon_transaction.release();
        }
    }
};

/**
 * @route POST /api/discounts/apply
 * @desc ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 * @body { code_name: string, user_id: number }
 * @response { message: string, code_name: string, subtotal_price: number, discount_value: number, final_price: number }
 * @deprecated ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô purchaseGame_api ‡πÅ‡∏•‡πâ‡∏ß
 */
export const applyDiscount_api = async (req: Request, res: Response) => {
    const { code_name, user_id } = req.body;
    const uid = Number(user_id);

    if (!code_name || !uid) {
        return res.status(400).json({ message: "Missing required fields: code_name and user_id." });
    }

    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (Subtotal)
        const [basketRows] = await dbcon.query<RowDataPacket[]>(
            `SELECT SUM(g.price) AS subtotal
             FROM basket b
             JOIN game g ON b.game_id = g.game_id
             WHERE b.uid = ?`,
            [uid]
        );
        const subtotal = basketRows[0]?.subtotal || 0;

        if (subtotal === 0) {
             return res.status(400).json({ message: "Basket is empty." });
        }

        // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ FOR UPDATE ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏±‡∏Å‡∏•‡∏ö)
        const [codeRows] = await dbcon.query<RowDataPacket[]>(
            "SELECT code_id, discount_value, remaining_user FROM discountcode WHERE code_name = ?",
            [code_name]
        );
        const discountCode = codeRows[0];
        if (!discountCode || discountCode.remaining_user <= 0) {
             return res.status(400).json({ message: "Invalid or expired discount code." });
        }

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (5.3: 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
        const [usageCheck] = await dbcon.query<RowDataPacket[]>(
            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Transaction ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ code_id ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            "SELECT transaction_id FROM gametransaction WHERE user_id = ? AND code_id = ?",
            [uid, discountCode.code_id]
        );
        if (usageCheck.length > 0) {
            return res.status(409).json({ message: "You have already used this discount code." });
        }

        // 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
        const discountAmount = discountCode.discount_value;
        const finalTotal = Math.max(0, subtotal - discountAmount);

        return res.status(200).json({
            message: "Discount applied.",
            code_name: code_name,
            subtotal_price: subtotal,
            discount_value: discountAmount,
            final_price: finalTotal
        });

    } catch (error) {
        console.error("Error applying discount:", error);
        return res.status(500).json({ message: "Server error while applying discount." });
    }
};

// --- Transaction History (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route GET /api/users/:user_id/history/transactions
 * @desc ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô/‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°)
 */
export const getTransactionHistory_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;
    try {
        // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô
        const [topupRows] = await dbcon.query<RowDataPacket[]>(
            `SELECT topup_id, amount, transaction_date, 'TOPUP' as type
             FROM topup
             WHERE user_id = ?`,
            [uid]
        );

        // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°
        const [purchaseRows] = await dbcon.query<RowDataPacket[]>(
            `SELECT transaction_id, final_amount as amount, transaction_date, 'PURCHASE' as type
             FROM gametransaction
             WHERE user_id = ?`,
            [uid]
        );

        // ‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        const combinedHistory = [...topupRows, ...purchaseRows]
            .map(row => ({
                id: row.topup_id || row.transaction_id,
                amount: row.amount,
                type: row.type,
                date: row.transaction_date,
            }))
            .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

        return res.status(200).json(combinedHistory);
    } catch (error) {
        console.error(`Error fetching transaction history for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while fetching transaction history." });
    }
};

/**
 * @route GET /api/users/:user_id/history/purchases
 * @desc ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */
export const getGamePurchaseHistory_api = async (req: Request, res: Response) => {
    const uid = req.params.user_id;

    try {
        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Transaction ‡∏´‡∏•‡∏±‡∏Å
        const [transactions] = await dbcon.query<RowDataPacket[]>(
            `SELECT transaction_id, total_amount, discount_used, final_amount, code_id, transaction_date
             FROM gametransaction
             WHERE user_id = ?
             ORDER BY transaction_date DESC`,
            [uid]
        );

        // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Transaction
        const history = await Promise.all(transactions.map(async (tx) => {
            const [items] = await dbcon.query<RowDataPacket[]>(
                `SELECT gtx.item_id, gtx.game_id, gtx.price_paid, g.name AS game_name
                 FROM gametransactionitem gtx
                 JOIN game g ON gtx.game_id = g.game_id
                 WHERE gtx.transaction_id = ?`,
                [tx.transaction_id]
            );

            // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            let code_name = null;
            if (tx.code_id) {
                const [codeRow] = await dbcon.query<RowDataPacket[]>(
                    "SELECT code_name FROM discountcode WHERE code_id = ?",
                    [tx.code_id]
                );
                code_name = codeRow[0]?.code_name || null;
            }


            return {
                ...tx,
                code_name,
                items: items
            };
        }));

        return res.status(200).json(history);
    } catch (error) {
        console.error(`Error fetching game purchase history for user ${uid}:`, error);
        return res.status(500).json({ message: "Server error while fetching game purchase history." });
    }
};
