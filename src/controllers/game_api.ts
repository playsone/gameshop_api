// controllers/gameController.ts
import { Request, Response } from "express";
import { dbcon } from "../database/pool";
import { OkPacket, RowDataPacket } from 'mysql2';

// --- Game CRUD (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route POST /api/admin/games
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Insert Game
 */
export const createGame_api = async (req: Request, res: Response) => {
    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö release_date ‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ NOW() ‡πÅ‡∏ó‡∏ô
    const { name, price, description, image, type_id } = req.body; 

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 500
    if (!name || !price || !type_id) {
        return res.status(400).json({ message: "Missing required fields: name, price, and type_id are mandatory." });
    }
    const numPrice = Number(price);
    const numTypeId = Number(type_id);
    if (isNaN(numPrice) || isNaN(numTypeId) || numPrice < 0) {
        return res.status(400).json({ message: "Price and Type ID must be valid non-negative numbers." });
    }

    try {
        const [results] = await dbcon.query<OkPacket>(
            // ‚úÖ ‡πÉ‡∏ä‡πâ NOW() ‡πÉ‡∏ô SQL ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            "INSERT INTO game(name, price, release_date, description, image, type_id) VALUES (?, ?, NOW(), ?, ?, ?)",
            [name, numPrice, description || null, image || null, numTypeId]
        );
        
        return res.status(201).json({ message: "Game created successfully.", game_id: results.insertId });
    } catch (err: any) {
        console.error(err);
        // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ñ‡∏µ‡∏¢‡πå (Foreign Key) ‡∏à‡∏∞‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        res.status(500).json({ message: "Server error during game creation.", error: err.message });
    }
};

/**
 * @route PUT /api/admin/games/:game_id
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Update Game
 */
export const updateGame_api = async (req: Request, res: Response) => {
    const game_id = Number(req.params.game_id);
    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö release_date ‡∏à‡∏≤‡∏Å req.body ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ NOW() ‡πÅ‡∏ó‡∏ô
    const { name, price, description, image, type_id } = req.body; 

    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö game_id
    if (isNaN(game_id) || game_id <= 0) {
        return res.status(400).json({ message: "Invalid Game ID in request parameters." });
    }
    // (‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö name, price, type_id ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢)

    try {
        const [results] = await dbcon.query<OkPacket>(
            // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î release_date = NOW() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            "UPDATE game SET name = ?, price = ?, release_date = NOW(), description = ?, image = ?, type_id = ? WHERE game_id = ?",
            [name, price, description || null, image || null, Number(type_id), game_id]
        );

        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Game not found or no changes made." });
        }
        
        return res.status(200).json({ message: "Game updated successfully." });
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "Server error during game update.", error: err.message });
    }
};

/**
 * @route DELETE /api/admin/games/:game_id
 * @desc Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏° (CRUD) - Delete Game
 */
export const deleteGame_api = async (req: Request, res: Response) => {
    const game_id = Number(req.params.game_id);
    if (isNaN(game_id) || game_id <= 0) {
        return res.status(400).json({ message: "Invalid Game ID." });
    }
    try {
        const [results] = await dbcon.query<OkPacket>("DELETE FROM game WHERE game_id = ?", [game_id]);
        
        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Game not found." });
        }
        
        return res.status(200).json({ message: "Game deleted successfully." });
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "Server error during game deletion.", error: err.message });
    }
};

// --- GameType CRUD (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route POST /api/admin/gametypes
 * @desc Admin ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°
 */
export const createGameType_api = async (req: Request, res: Response) => {
    const { typename } = req.body;
    
    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation)
    if (!typename || typeof typename !== 'string' || typename.trim() === '') {
        return res.status(400).json({ message: "Game type name (typename) is required." });
    }
    
    try {
        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO gametype(typename) VALUES (?)",
            [typename]
        );
        return res.status(201).json({ message: "Game type created.", type_id: results.insertId });
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "Server error during type creation.", error: err.message });
    }
};

// --- Store Views (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route GET /api/games/latest
 * @desc ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Store) ‡πÅ‡∏™‡∏î‡∏á 10 ‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
 */
export const getLatestGames_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.description, g.image, t.typename AS type
             FROM game g
             JOIN gametype t ON g.type_id = t.type_id
             ORDER BY g.release_date DESC
             LIMIT 10`
        );
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

// --- NEW: API ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß ---
/**
 * @route GET /api/games/search
 * @desc ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏° (‡∏ä‡∏∑‡πà‡∏≠) ‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
 * @queryParam q (string, optional): ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (LIKE %a%)
 * @queryParam type_id (number, optional): ID ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
 */
export const searchGames_api = async (req: Request, res: Response) => {
    // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å query parameters
    const search_term = (req.query.q as string)?.trim() || '';
    const type_id = (req.query.type_id as string)?.trim();

    let sql = `
        SELECT g.game_id, g.name, g.price, g.image, t.typename AS type
        FROM game g
        JOIN gametype t ON g.type_id = t.type_id
    `;
    const params: (string | number)[] = [];
    const whereConditions: string[] = [];

    // 1. ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏° (LIKE %q%)
    if (search_term) {
        const wildcard_term = `%${search_term}%`;
        whereConditions.push(`g.name LIKE ?`);
        params.push(wildcard_term);
    }
    
    // 2. ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏Å‡∏° (g.type_id = ?)
    if (type_id && !isNaN(Number(type_id))) {
        whereConditions.push(`g.type_id = ?`);
        params.push(Number(type_id));
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á WHERE clause (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)
    if (whereConditions.length > 0) {
        sql += ` WHERE ` + whereConditions.join(' AND ');
    }
    
    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    sql += ` ORDER BY g.name ASC`;
    
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(sql, params);
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 404
        if (rows.length === 0 && (search_term || type_id)) {
            return res.status(404).json({ message: "No games found matching the criteria." });
        }
        
        res.status(200).json(rows);
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "Server error during game search.", error: err.message });
    }
};

/**
 * @route GET /api/games/:game_id
 * @desc ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Å‡∏°
 */
export const getGameDetails_api = async (req: Request, res: Response) => {
    const game_id = Number(req.params.game_id);
    if (isNaN(game_id) || game_id <= 0) {
        return res.status(400).json({ message: "Invalid Game ID." });
    }
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.description, g.image, t.typename AS type
             FROM game g
             JOIN gametype t ON g.type_id = t.type_id
             WHERE g.game_id = ?`,
            [game_id]
        );
        
        if (rows.length === 0) {
            return res.status(404).json({ message: "Game not found." });
        }
        
        res.status(200).json(rows[0]);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

/**
 * @route GET /api/games/top-sellers
 * @desc ‡πÄ‡∏Å‡∏°‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ Top 5
 */
export const getTopSellerGames_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.description, g.image, t.typename AS type,
                    COUNT(gt.game_id) AS total_sold
             FROM gametransaction gt
             JOIN game g ON gt.game_id = g.game_id
             JOIN gametype t ON g.type_id = t.type_id
             GROUP BY g.game_id, g.name, g.price, g.release_date, g.description, g.image, t.typename
             HAVING COUNT(gt.game_id) > 0
             ORDER BY total_sold DESC
             LIMIT 5`
        );
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};


// --- Basket Management (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route POST /api/users/:user_id/basket/:game_id
 * @desc ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (Add to Basket)
 */
export const addToBasket_api = async (req: Request, res: Response) => {
    const uid = Number(req.params.user_id);
    const game_id = Number(req.params.game_id);
    
    if (isNaN(uid) || uid <= 0 || isNaN(game_id) || game_id <= 0) {
        return res.status(400).json({ message: "Invalid User ID or Game ID." });
    }

    try {
        const [libraryCheck] = await dbcon.query<RowDataPacket[]>(
            "SELECT * FROM usersgamelibrary WHERE user_id = ? AND game_id = ?",
            [uid, game_id]
        );
        if (libraryCheck.length > 0) {
            return res.status(409).json({ message: "Game already exists in your library." });
        }

        const [basketCheck] = await dbcon.query<RowDataPacket[]>(
            "SELECT * FROM basket WHERE uid = ? AND game_id = ?",
            [uid, game_id]
        );
        if (basketCheck.length > 0) {
            return res.status(409).json({ message: "Game already in basket." });
        }

        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO basket (uid, game_id) VALUES (?, ?)",
            [uid, game_id]
        );

        return res.status(201).json({ message: "Game added to basket successfully.", bid: results.insertId });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

/**
 * @route GET /api/users/:user_id/basket
 * @desc ‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 */
export const getBasket_api = async (req: Request, res: Response) => {
    const uid = Number(req.params.user_id);
    if (isNaN(uid) || uid <= 0) {
        return res.status(400).json({ message: "Invalid User ID." });
    }
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT b.bid, g.game_id, g.name, g.price
             FROM basket b
             JOIN game g ON b.game_id = g.game_id
             WHERE b.uid = ?`,
            [uid]
        );
        
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

/**
 * @route DELETE /api/users/:user_id/basket/:bid
 * @desc ‡∏•‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
 */
export const removeFromBasket_api = async (req: Request, res: Response) => {
    const user_id = Number(req.params.user_id);
    const bid = Number(req.params.bid);
    
    if (isNaN(user_id) || user_id <= 0 || isNaN(bid) || bid <= 0) {
        return res.status(400).json({ message: "Invalid User ID or Basket ID." });
    }
    
    try {
        const [results] = await dbcon.query<OkPacket>(
            "DELETE FROM basket WHERE bid = ? AND uid = ?", 
            [bid, user_id]
        );
        
        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Item not found in basket or access denied." });
        }
        
        return res.status(200).json({ message: "Item removed from basket." });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

// --- Library (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User) ---

/**
 * @route GET /api/users/:user_id/library
 * @desc ‡∏î‡∏π‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏°
 */
export const getUserGameLibrary_api = async (req: Request, res: Response) => {
    const user_id = Number(req.params.user_id);
    if (isNaN(user_id) || user_id <= 0) {
        return res.status(400).json({ message: "Invalid User ID." });
    }
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.image, g.release_date
             FROM usersgamelibrary u
             JOIN game g ON u.game_id = g.game_id
             WHERE u.user_id = ?
             ORDER BY u.purchase_date DESC`,
            [user_id]
        );
        
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

// --- Discount Code CRUD (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin) ---

/**
 * @route GET /api/admin/discounts
 * @desc Admin ‡∏î‡∏π‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const getAllDiscountCodes_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>("SELECT * FROM discountcode");
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

/**
 * @route POST /api/admin/discounts
 * @desc Admin ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
 */
export const createDiscountCode_api = async (req: Request, res: Response) => {
    const { code_name, discount_value, max_user } = req.body;
    
    // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Validation)
    if (!code_name || isNaN(Number(discount_value)) || isNaN(Number(max_user)) || Number(discount_value) <= 0 || Number(max_user) <= 0) {
         return res.status(400).json({ message: "Missing required fields or invalid number values (must be positive)." });
    }
    
    const value = Number(discount_value);
    const remaining_user = Number(max_user);
    
    try {
        const [results] = await dbcon.query<OkPacket>(
            "INSERT INTO discountcode(code_name, discount_value, remaining_user, max_user) VALUES (?, ?, ?, ?)",
            [code_name, value, remaining_user, max_user]
        );
        
        if (results.affectedRows > 0) {
            return res.status(201).json({ message: "Discount code created successfully.", code_id: results.insertId });
        }
        res.status(400).json({ message: "Failed to create discount code." });
    } catch (err: any) {
        console.error(err);
        res.status(500).json({ message: "Server error during code creation.", error: err.message });
    }
};

/**
 * @route DELETE /api/admin/discounts/:code_id
 * @desc Admin ‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
 */
export const deleteDiscountCode_api = async (req: Request, res: Response) => {
    const code_id = Number(req.params.code_id);
    if (isNaN(code_id) || code_id <= 0) {
        return res.status(400).json({ message: "Invalid Code ID." });
    }
    try {
        const [results] = await dbcon.query<OkPacket>("DELETE FROM discountcode WHERE code_id = ?", [code_id]);

        if (results.affectedRows === 0) {
            return res.status(404).json({ message: "Discount code not found." });
        }

        return res.status(200).json({ message: "Discount code deleted successfully." });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error." });
    }
};

// --- 2.3 ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (NEW) ---
export const getAllGameTypes_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>("SELECT type_id, typename FROM gametype ORDER BY typename ASC");
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error fetching game types." });
    }
};

// --- 2.1 ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin View) (NEW) ---
export const getAllGames_api = async (req: Request, res: Response) => {
    try {
        const [rows] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.game_id, g.name, g.price, g.release_date, g.image, t.typename AS type
             FROM game g
             JOIN gametype t ON g.type_id = t.type_id
             ORDER BY g.game_id DESC`
        );
        res.status(200).json(rows);
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error fetching all games." });
    }
};

// --- 4.2, 5.3 User ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (NEW) ---
export const applyDiscount_api = async (req: Request, res: Response) => {
    const uid = Number(req.params.user_id);
    const { code_name } = req.body;
    
    if (isNaN(uid) || uid <= 0) return res.status(400).json({ message: "Invalid User ID." });
    if (!code_name) return res.status(400).json({ message: "Discount code is required." });

    try {
        // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        const [basketItems] = await dbcon.query<RowDataPacket[]>(
            `SELECT g.price FROM basket b JOIN game g ON b.game_id = g.game_id WHERE b.uid = ?`,
            [uid]
        );
        if (basketItems.length === 0) return res.status(404).json({ message: "Basket is empty." });
        const subtotal = basketItems.reduce((sum, item) => sum + item.price, 0);

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (5.2: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        const [codeRows] = await dbcon.query<RowDataPacket[]>(
            "SELECT code_id, discount_value, remaining_user FROM discountcode WHERE code_name = ?",
            [code_name]
        );
        const discountCode = codeRows[0];
        if (!discountCode || discountCode.remaining_user <= 0) {
             return res.status(400).json({ message: "Invalid or expired discount code." });
        }

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥ (5.3: 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
        const [usageCheck] = await dbcon.query<RowDataPacket[]>(
            // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Transaction ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ code_id ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            "SELECT transaction_id FROM gametransaction WHERE user_id = ? AND code_id = ?",
            [uid, discountCode.code_id]
        );
        if (usageCheck.length > 0) {
            return res.status(409).json({ message: "You have already used this discount code." });
        }
        
        // 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
        const discountAmount = discountCode.discount_value;
        const finalTotal = Math.max(0, subtotal - discountAmount);

        return res.status(200).json({
            message: "Discount applied.",
            code_name: code_name,
            subtotal_price: subtotal,
            discount_value: discountAmount,
            final_price: finalTotal
        });

    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Server error during discount application." });
    }
};